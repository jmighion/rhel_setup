---
- name: Install some packages
  yum:
    name:
      - vim
      - wget
      - bash-completion
      - tree
      - git
      - podman
      # for installing newer python
      - "@Development tools"
      - zlib-devel
      - bzip2
      - bzip2-devel
      - readline-devel
      - sqlite
      - sqlite-devel
      - openssl-devel
      - xz
      - xz-devel
      - libffi-devel
      - findutils
      - tk-devel
    state: latest
  become: true
  tags:
    - install
    - yum

# Install gh cli
# https://github.com/cli/cli/blob/trunk/docs/install_linux.md#fedora-centos-red-hat-enterprise-linux-dnf

- name: Ensure hosts file is there with localhost in it
  ansible.builtin.lineinfile:
    path: ~/hosts
    line: localhost
    create: yes

- name: Template default python version for pyenv
  ansible.builtin.template:
    src: .python-version.j2
    dest: ~/.python-version

- name: Make dirs
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - ~/vimtmp
    - ~/.azure
    - ~/tmp
  tags:
    - install
    - config_files

- name: Copy over files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest | default('~/') }}"
    mode: "{{ item.mode | default(omit) }}"
    backup: yes
  with_items:
    - src: .bash_profile
    - src: .bashrc
    - src: .gitconfig
    - src: .vimrc
    - src: .inputrc
    - src: ~/.ssh/id_rsa
      dest: ~/.ssh/id_rsa
      mode: "0400"
    - src: ~/.ssh/id_rsa.pub
      dest: ~/.ssh/id_rsa.pub
    - src: ~/.azure/credentials
      dest: ~/.azure/credentials
    - src: .ansible-navigator.yml
    - src: ~/Documents/git/ansible-azure-mgmt/tools/load_credentials.sh
  tags:
    - install
    - config_files

- name: Check for pyenv
  command:
    cmd: which pyenv
  register: pyenv
  ignore_errors: yes
  changed_when: false

- name: Install pyenv
  block:
    - name: Run installer
      shell: curl https://pyenv.run | bash

    # Need to set export TMPDIR=~/tmp because /tmp has noexec
    # Needs the full path. I will remove my user name later.
    - name: Install python
      shell: pyenv install "{{ python_version }}"
      environment:
        TMPDIR: /home/jmighion/tmp

    - name: Add venv
      shell: pyenv virtualenv "{{ python_version }}" "{{ python_version }}"_dev
  when: pyenv.rc != 0

# Separately update pip first to ensure it's up to date before any other pip installs
- name: Update pip
  pip:
    name:
      - pip
      - setuptools
    state: latest
    # extra_args: --user
    virtualenv: "~/.pyenv/versions/{{ python_version }}/envs/{{ python_version }}_dev"
    virtualenv_command: pyenv
  tags:
    - update
    - pip

- name: Pip install things
  pip:
    name:
      - ansible
      - ansible-navigator
      - ansible-lint
      # - thefuck
    state: latest
    # extra_args: --user
    virtualenv: "~/.pyenv/versions/{{ python_version }}/envs/{{ python_version }}_dev"
    virtualenv_command: pyenv
  tags:
    - update
    - pip

# Destination name must be set to a full path, not a dir and be empty the first time
- name: Clone personal SRE repo
  git:
    repo: git@github.com:jmighion/ansible-azure-sre.git
    dest: ~/ansible-azure-sre
    update: no
    accept_newhostkey: yes

- name: Add remote upstream to github projects
  # Git module does not know how to add remotes (yet...)
  # Using command and silencing corresponding ansible-lint rule
  # noqa command-instead-of-module
  command:
    cmd: git remote add upstream git@github.com:ansible/ansible-azure-sre.git
    chdir: ~/ansible-azure-sre
  register: result
  changed_when: result.rc == 0
  failed_when:
    - result.rc != 0
    - result.stderr | default('') is not search("remote .* already exists")

- name: iterm2 shell integration
  get_url:
    url: https://iterm2.com/shell_integration/bash
    dest: "{{ item }}"
    mode: "0776"
  become: true
  with_items:
    - /root/.iterm2_shell_integration.bash
    - /home/jmighion/.iterm2_shell_integration.bash
  tags:
    - install
    - config_files

- name: Pull latest image
  containers.podman.podman_image:
    name: quay.io/aoc/ee-aap-azure-sre
    force: yes
