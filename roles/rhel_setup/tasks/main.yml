---
- name: Install some packages # noqa package-latest
  ansible.builtin.yum:
    name:
      - vim
      - wget
      - bash-completion
      - tree
      - git
      - podman
      # for installing newer python, might be able to trim this down
      - "@Development tools"
      - zlib-devel
      - bzip2
      - bzip2-devel
      - readline-devel
      - sqlite
      - sqlite-devel
      - openssl-devel
      - xz
      - xz-devel
      - libffi-devel
      - findutils
      - tk-devel
      - oniguruma
      - oniguruma-devel
    state: latest
  become: true
  tags:
    - yum

# Install gh cli
# https://github.com/cli/cli/blob/trunk/docs/install_linux.md#fedora-centos-red-hat-enterprise-linux-dnf

- name: Ensure hosts file is there with localhost in it
  ansible.builtin.lineinfile:
    path: ~/hosts
    line: localhost
    create: true
    mode: "640"
  tags:
    - config_files

- name: Template some files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "640"
  loop:
    - src: .python-version.j2
      dest: ~/.python-version
    - src: .ansible-navigator.yml.j2
      dest: ~/.ansible-navigator.yml
    - src: .bashrc.j2
      dest: ~/.bashrc
  tags:
    - config_files

- name: Make dirs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "750"
  loop:
    - ~/vimtmp
    - ~/.azure
    - ~/tmp
  tags:
    - config_files

- name: Copy over files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest | default('~/') }}"
    mode: "{{ item.mode | default(omit) }}"
    backup: "{{ item.backup | default(true) }}"
  with_items:
    - src: ~/.ansible.cfg
      backup: false
    - src: ~/.azure/credentials
      dest: ~/.azure/credentials
    - src: .bash_profile
    - src: .gitconfig
    - src: .inputrc
    - src: ~/Documents/git/ansible-azure-mgmt/tools/load_credentials.sh
    - src: ~/.ssh/id_rsa
      dest: ~/.ssh/id_rsa
      mode: "0400"
    - src: ~/.ssh/id_rsa.pub
      dest: ~/.ssh/id_rsa.pub
    - src: .vimrc
  tags:
    - config_files

# This is only here because my local machine's is slightly different and has a private token, so copying it over and changing it.
- name: Ensure hosts file is set in .ansible.cfg
  ansible.builtin.lineinfile:
    path: ~/.ansible.cfg
    regexp: '^inventory      ='
    line: inventory      = ~/hosts
    create: true
    mode: "640"

- name: Check for pyenv
  ansible.builtin.command:
    cmd: which pyenv
  register: pyenv
  ignore_errors: true
  changed_when: false

# This could be broken up into separate checks and installations to avoid problems if it bails during the python install.
- name: Install pyenv
  when: pyenv.rc != 0
  block:
    - name: Run installer # noqa command-instead-of-module no-changed-when
      ansible.builtin.shell: set -o pipefail && curl https://pyenv.run | bash

    # Need to set export TMPDIR=~/tmp because /tmp has noexec
    - name: Install python # noqa command-instead-of-shell no-changed-when
      ansible.builtin.shell: pyenv install "{{ python_version }}"
      environment:
        TMPDIR: /home/{{ ansible_user_id }}/tmp

    - name: Add venv  # noqa command-instead-of-shell no-changed-when
      ansible.builtin.shell: pyenv virtualenv "{{ python_version }}" "{{ python_version }}"_dev


# Separately update pip first to ensure it's up to date before any other pip installs
- name: Update pip # noqa package-latest
  ansible.builtin.pip:
    name:
      - pip
      - setuptools
    state: latest
    virtualenv: "~/.pyenv/versions/{{ python_version }}/envs/{{ python_version }}_dev"
    virtualenv_command: pyenv
  tags:
    - pip

- name: Pip install things # noqa package-latest
  ansible.builtin.pip:
    name:
      - ansible
      - ansible-navigator
      - ansible-lint
    state: latest
    virtualenv: "~/.pyenv/versions/{{ python_version }}/envs/{{ python_version }}_dev"
    virtualenv_command: pyenv
  tags:
    - pip

- name: Galaxy install collection azure.azcollection
  community.general.ansible_galaxy_install:
    type: collection
    name: azure.azcollection
    force: true
  tags:
    - galaxy

- name: Pip install azure.azcollection requirements
  ansible.builtin.pip:
    requirements: ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt
    virtualenv: "~/.pyenv/versions/{{ python_version }}/envs/{{ python_version }}_dev"
    virtualenv_command: pyenv
  tags:
    - pip

- name: Clone personal SRE repo # noqa latest[git]
  ansible.builtin.git:
    repo: git@github.com:{{ ansible_user_id }}/{{ item }}.git
    dest: ~/{{ item }}
    update: false
    accept_newhostkey: true
  loop:
    - ansible-azure-sre
    - managed_azure
  tags:
    - git

- name: Add remote upstream to github projects
  # Git module does not know how to add remotes (yet...)
  # Using command and silencing corresponding ansible-lint rule
  # noqa command-instead-of-module
  ansible.builtin.command:
    cmd: git remote add upstream git@github.com:ansible/{{ item }}.git
    chdir: ~/{{ item }}
  loop:
    - ansible-azure-sre
    - managed_azure
  register: result
  changed_when: result.rc == 0
  failed_when:
    - result.rc != 0
    - result.stderr | default('') is not search("remote .* already exists")
  tags:
    - git

- name: Fetch all remotes # noqa command-instead-of-module
  ansible.builtin.command:
    cmd: git fetch --all
    chdir: ~/{{ item }}
  loop:
    - ansible-azure-sre
    - managed_azure
  changed_when: false
  tags:
    - git

- name: Switch to upstream/main
  ansible.builtin.git:
    repo: git@github.com:ansible/{{ item }}.git
    dest: ~/{{ item }}
    remote: upstream
    version: upstream/main
  loop:
    - ansible-azure-sre
    - managed_azure
  tags:
    - git

- name: Galaxy install collection redhat.ansible_azure_sre
  ansible.builtin.command:
    cmd: ansible-galaxy collection install .
    chdir: ~/{{ item }}
  loop:
    - ansible-azure-sre
    - managed_azure
  register: result
  changed_when: result.stdout is not search("Nothing to do")
  tags:
    - galaxy

- name: Add iterm2 shell integration
  ansible.builtin.get_url:
    url: https://iterm2.com/shell_integration/bash
    dest: "{{ item.dest }}"
    mode: "776"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
  become: true
  with_items:
    - dest: /root/.iterm2_shell_integration.bash
      user: root
      group: root
    - dest: /home/{{ ansible_user_id }}/.iterm2_shell_integration.bash
      user: "{{ ansible_user_id }}"
      group: users
  tags:
    - config_files

- name: Pull latest image
  containers.podman.podman_image:
    name: quay.io/aoc/ee-aap-azure-sre
    force: true
